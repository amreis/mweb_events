= simple_form_for(@event, :class => 'form-inline') do |f|
  = f.error_notification

  .form-inputs

    = f.input :owner_name, :disabled => true

    = f.input :name

    = f.hidden_field :owner_id
    = f.hidden_field :owner_type

    = f.hidden_field :date_stored_format
    - error_messages = { start_on: @event.errors[:start_on].try(:join, ', '), end_on: @event.errors[:end_on].try(:join, ', ') }
    - errors = { start_on: @event.errors[:start_on].present?, end_on: @event.errors[:end_on].present? }

    .input.string.event_start_on.field_with_hint{ class: ('field_with_errors' if errors[:start_on]) }
      = f.label :start_on_date
      .input-append.date#start_on_date.datepicker-field{:'data-date-locale' => @date_locale, :'date-format' => @date_format}
        = f.hint :start_on_date
        = f.text_field :start_on_date
        %span.add-on
          %i{:'class'=>"icon icon-calendar"}
      %span= t(".at")
      #start_on_time
        = f.input :start_on_time, :label => false, :as => :time, :minute_step => 5, default: Time.parse('00:00')
      %i.icon-remove-sign.clear-date.tooltipped{:'data-clear' => 'start_on_date, start_on_time', :title => t(".clear_start_date")}

      - if errors[:start_on]
        %span.error
          = error_messages[:start_on]

    .input.string.event_end_on.field_with_hint{class: ('field_with_errors' if errors[:end_on]) }
      = f.label :end_on_date
      .input-append.date#end_on_date.datepicker-field{:'data-date-locale' => @date_locale, :'date-format' => @date_format}
        = f.hint :end_on_date
        = f.text_field :end_on_date
        %span.add-on
          %i{:'class'=>"icon icon-calendar"}
      %span= t(".at")
      #end_on_time
        = f.input :end_on_time, :label => false, :as => :time, :minute_step => 5, default: Time.parse('00:00')
      %i.icon-remove-sign.clear-date.tooltipped{:'data-clear' => 'end_on_date, end_on_time', :title => t(".clear_end_date")}

      - if errors[:end_on]
        %span.error
          = error_messages[:end_on]

    .input.string.event_time_zone.field_with_hint

      = f.label :time_zone
      = f.hint :time_zone

      = f.time_zone_select :time_zone, [Time.zone]
      #time_zone_options{:'data-default' => Time.zone}

    = f.input :location

    = f.input :address

    .input.event_social_networks.field_with_hint

      = f.label :social_networks
      = f.hint :social_networks

      .form-inline
        = f.collection_check_boxes :social_networks, MwebEvents::SOCIAL_NETWORKS, :to_s, :to_s
    %br
    %br

    = f.input :summary, :input_html => { :rows => 3 }

    = f.input :description

    = render 'markdown_modal'

    #epiceditor

    - cancel_path = @event.new_record? ? events_path : event_path(@event)
    = f.button :wrapped, :cancel => cancel_path, :value => t("_other.save")
